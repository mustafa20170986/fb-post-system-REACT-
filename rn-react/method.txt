roject Methodology: Building a Simple Social Media Post App
This document outlines the systematic approach used to design, implement, and code the social media post application. The process was broken down into three key phases: conceptualization, logical design, and technical implementation.

1. Conceptual Approach: How I Approached the Problem
The initial step was to deconstruct the core request: create a simple interface to post a message and/or an image. This was broken down into the following functional requirements:

Input Capability: The application needs a way for the user to input text and select an image.

Action Trigger: A clear call-to-action is required to submit the post.

Output Display: A dedicated area is needed to display the submitted posts in chronological order.

Reset Mechanism: After a post is submitted, the input fields should be cleared to allow for a new post.

By identifying these discrete features, the problem was transformed from a large task into a set of smaller, manageable components. The chosen framework, React, is ideally suited for this component-based architecture.

2. Logical Design: How I Made the Logic
The logical design focused on the data flow and state management within the application.

State as the Single Source of Truth: The application's core data is managed by three state variables using React's useState hook:

text: Stores the string value of the caption.

image: Stores the Base64 data URL of the selected image. Using a Data URL is crucial because it allows the image data to be stored directly in memory, preventing reliance on a temporary, session-specific file URL.

post: An array that acts as the database, holding all submitted post objects.

User Interaction Flow:

When the user types, the Input component's onChange event updates the text state.

When an image is selected, the Image component uses the FileReader API to convert the file into a Base64 string. This string is then passed back to the App component's setImage function, updating the image state.

Clicking the Button triggers the handlepost function.

handlepost Function Logic: This function is the central piece of logic for a new post. It performs the following steps:

Validation: It first checks if both text and image are empty. If so, it returns, preventing a blank post from being created.

Object Creation: It creates a new newpost object. This object bundles the text and image data together with a unique id (generated using Date.now()).

State Update: It updates the post array by adding the newpost object to the beginning of the array using the spread operator (...post). This non-destructive update is essential for immutability and triggering a re-render in React.

Form Reset: Finally, it calls setText("") and setImage(null) to clear the input fields, preparing the form for the next post.

3. Technical Implementation: How I Wrote the Code
The logical design was translated into code using a component-based architecture.

Component Structure: The application was divided into four main components for reusability and clarity:

App.jsx: The main parent component responsible for managing all application state (text, image, post) and orchestrating the data flow.

Input.jsx: A controlled component for handling the text input. It receives the text value and the setText function via props.

Image.jsx: A component for the file input. It uses the FileReader API to read the image and passes the resulting Data URL back up to the parent App component via a prop.

Button.jsx: A reusable button component that receives its text (text prop) and its click handler (handlepost prop) from the parent.

Rendering with .map(): The post array is displayed using the JavaScript .map() method within the JSX. This iterates over each post object and returns a <div> element for each one. The unique id is used as the key prop, which helps React efficiently manage the list items.

Conditional Rendering: The display of the image and text is handled using conditional rendering ({ele.image && ...}). This ensures that an image tag is only rendered if an image exists in the post object, and a paragraph tag is only rendered if text exists. This prevents broken image icons or empty spaces from appearing.